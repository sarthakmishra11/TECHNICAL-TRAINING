#include <iostream>
#include <vector>
using namespace std;


bool hasSubsetWithSum(vector<int>& nums, int targetSum) {
    int n = nums.size();
    vector<vector<bool>> dp(n + 1, vector<bool>(targetSum + 1, false));
    
    for (int i = 0; i <= n; i++)
        dp[i][0] = true;
    // Fill the dp table
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= targetSum; j++) {
            
            if (nums[i - 1] > j)
                dp[i][j] = dp[i - 1][j];
            else
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
        }
    }
    return dp[n][targetSum];
}

int main() {
    vector<int> nums = {3, 34, 4, 12, 5, 2};
    int targetSum1 = 9;
    int targetSum2 = 30;
    // Check if there is a subset with sum = 9
    if (hasSubsetWithSum(nums, targetSum1))
        cout << "Subset with sum " << targetSum1 << " exists.\n";
    else
        cout << "Subset with sum " << targetSum1 << " does not exist.\n";
    
    if (hasSubsetWithSum(nums, targetSum2))
        cout << "Subset with sum " << targetSum2 << " exists.\n";
    else
        cout << "Subset with sum " << targetSum2 << " does not exist.\n";
    return 0;
}
